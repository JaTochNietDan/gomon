#!/usr/bin/env node
var fs          = require('fs');
var spawn       = require('child_process').spawn;
var exec        = require('child_process').exec;
var argv        = require('minimist')(process.argv.slice(2));
var watch       = require('watch');
var colorsTmpl  = require('colors');
var gorun;
var gobuild;
var buildissue  = false;

colorsTmpl.setTheme({
  data: 'grey'
});

// check
if (argv._.length <= 0 || argv._ > 1) {
  console.error('Use gomon like:', '\ngomon myfile.go'.green, '\nand not without any or multiple arguments!'.red);
  process.exit(2);
  return;
}

// setup
var maindir = "./"
var processName = argv._[0].split("/").pop().split(".")[0];
var path = argv._[0];

// setting the GOPATH
// process.env.GOPATH = process.cwd() + (process.env.GOPATH && ":" + process.env.GOPATH || "");

watch.createMonitor(maindir, function (monitor) {
  monitor.on("created", run);
  monitor.on("changed", run);
  monitor.on("removed", run);
})

function run (e) {
  if(e !== "server.exe" && (e === undefined || e.indexOf('.go') !== -1 || e.indexOf('.json') !== -1))
  {
    console.log('Rebuilding server...'.green)

    if(gorun !== undefined)
      gorun.kill();

    build();
  }
}

function build() {
  buildissue = false;
  gobuild = spawn('go', ['build', path]);
  gobuild.stdout.on('close', function (data) {
    if(buildissue) {
      console.log("Couldn't rebuild the server.".red);
    } else {
      start();
    }
  });

  gobuild.stdout.on('data', function (data) {
    console.log('Building issue: '.red + data.toString());
    buildissue = true;
  });

  gobuild.stderr.on('data', function (data) {
    console.log('Building issue: '.red + data.toString());
    buildissue = true;
  });
}

function start() {
  gorun = spawn('server.exe');

  gorun.stdout.on('data', function (data) {
    console.log(data.toString());
  });

  gorun.stderr.on('data', function (data) {
    console.log(data.toString());
  });
}

run();