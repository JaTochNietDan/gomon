#!/usr/bin/env node
var fs          = require('fs');
var spawn       = require('child_process').spawn;
var exec        = require('child_process').exec;
var argv        = require('minimist')(process.argv.slice(2));
var watch       = require('watch');
var colorsTmpl  = require('colors');
var mv          = require('mv');
var json        = require('json-file');
var gorun;
var gobuild;
var buildissue  = false;
var fsTimeout;

colorsTmpl.setTheme({
  data: 'grey'
});

// check
if (argv._.length <= 0 || argv._ > 1) {
  console.error('Use gomon like:', '\ngomon myfile.go'.green, '\nand not without any or multiple arguments!'.red);
  process.exit(2);
  return;
}

var file = json.read('./config.json');
var developer = file.get('Developer');  // eg. "1.0.0"

// setup
var maindir = "./"
var processName = argv._[0].split("/").pop().split(".")[0];
var path = argv._[0];

// Watch these directories
var directories = [
  ".",
  "tw",
  "twutil",
  "twcontroller",
  "twdata",
  "twstruct"
]

// setting the GOPATH
// process.env.GOPATH = process.cwd() + (process.env.GOPATH && ":" + process.env.GOPATH || "");

directories.forEach(function(e) {
  fs.watch(e, onChange);
});

function onChange(e, f) {
  if(!fsTimeout)
  {
    if(f !== undefined && f !== null && f.indexOf('.go') !== -1)
    {
      console.log('Rebuilding server...'.green)

      fsTimeout = setTimeout(function() { fsTimeout=null }, 1000)

      build();
    }
  }
}

function build() {
  buildissue = false;
  gobuild = spawn('go', ['build', '-o', 'server_new.exe', path]);
  gobuild.stdout.on('close', function (data) {
    if(buildissue) {
      console.log("Couldn't rebuild the server.".red);
    } else {
      if(gorun !== undefined)
        gorun.kill();
      else start();
    }
  });

  gobuild.stdout.on('data', function (data) {
    console.log('Building issue: '.red + data.toString());
    buildissue = true;
  });

  gobuild.stderr.on('data', function (data) {
    console.log('Building issue: '.red + data.toString());
    buildissue = true;
  });
}

function start() {
  if(fs.existsSync('server_new.exe')) {
    if(fs.existsSync('server.exe')) {
      fs.unlinkSync('server.exe');
    }

    mv('server_new.exe', 'server.exe', function(err) {
      spawnServer();
    });
  } else {
    spawnServer();
  }
}

function spawnServer() {
  gorun = spawn('server.exe');

  gorun.stdout.on('data', function (data) {
    console.log(data.toString());
  });

  gorun.stderr.on('data', function (data) {
    console.log(data.toString());
  });  

  gorun.on('exit', function (code, signal) {
    start();
  });

  gorun.on('error', function (code, signal) {
    console.log('Error Event:', code);
  });
}

build();